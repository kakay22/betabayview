{% load static %}
<!DOCTYPE html>
<html>

<head>
    <meta charset='utf-8'>
    <meta http-equiv='X-UA-Compatible' content='IE=edge'>
    <title>Navigate to {{ visit_target_full_name }}</title>
    <link rel="icon" href="{% static 'users/betaIcon (1).png' %}" type="image/x-icon">
    <script src="https://aframe.io/releases/1.4.0/aframe.min.js"></script>
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <link rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.5/font/bootstrap-icons.min.css">
    <style>
        /* Style for overlay containing exit button and visit info */
        #overlay {
            position: absolute;
            top: 15px;
            left: 15px;
            padding: 15px 20px;
            background-color: rgba(0, 0, 0, 0.55);
            border-radius: 10px;
            font-family: Arial, sans-serif;
            color: #dfd6d6;
            display: flex;
            align-items: flex-start;
            justify-content: space-between;
            width: 100%;
            max-width: 360px;
            z-index: 10;
        }
        #visitInfo {
            font-size: 16px;
            margin-bottom: 10px;
        }
        #exitButton {
            padding: 10px 15px;
            background-color: rgb(70, 69, 69);
            color: #fff;
            border: none;
            border-radius: 5px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        #exitButton:hover {
            background-color: #0056b3;
        }
    </style>
</head>

<body style='margin: 0; overflow: hidden;'>
    <!-- Overlay with exit button and visit info -->
    <div class="w-full" id="overlay">
        <div class="flex flex-col" id="visitInfo">
            <p><strong>Visit to:</strong> {{ visit_target_full_name }}</p>
            <p><strong>Block:</strong> {{ visit_request.household_head.property.property_block_no }}</p>
            <p><strong>Lot:</strong> {{ visit_request.household_head.property.property_house_no }}</p>
            <p>
                <strong>Coordinates:</strong>
                <span id="lat">{{ visit_request.lat }}</span>,
                <span id="lng">{{ visit_request.lng }}</span>
            </p>
            <p><strong>Distance:</strong> <span id="distance">Calculating...</span></p>
        </div>
        <a class="text-lg" href="{% url 'map' %}" id="exitButton"><i class="bi bi-x"></i></a>
    </div>

    <!-- <img class="absolute top-2 right-2" src="{% static 'users/arrow.glb' %}" alt="" srcset=""> -->

    <a-scene embedded arjs="sourceType: webcam;">
        <a-assets timeout="10000">
            <a-asset-item id="arrow" src="{% static 'users/direction_arrow.glb' %}"></a-asset-item>
        </a-assets>
    
        <!-- Set the position to center the model on the screen -->
        <a-entity
            class="absolute top-[50%] left-[50%] z-[9999]"
            gltf-model="#arrow"
            position="0 -0.3 -3"
            scale="0.7 0.1 2"
            animation="property: rotation; to: 0 360 0; loop: true; dur: 4500; easing: linear"
        ></a-entity>

        
        <a-entity camera look-controls="pointerLockEnabled: true" position="0 0 0" near="0.5"></a-entity>
    </a-scene>    

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const targetLat = parseFloat(document.getElementById('lat').textContent);
            const targetLng = parseFloat(document.getElementById('lng').textContent);
    
            if (isNaN(targetLat) || isNaN(targetLng)) {
                console.error("Invalid target coordinates:", targetLat, targetLng);
            } else {
                function calculateDistance(lat1, lng1, lat2, lng2) {
                    const R = 6371e3; // Earth's radius in meters
                    const phi1 = lat1 * (Math.PI / 180);
                    const phi2 = lat2 * (Math.PI / 180);
                    const deltaPhi = (lat2 - lat1) * (Math.PI / 180);
                    const deltaLambda = (lng2 - lng1) * (Math.PI / 180);
    
                    const a = Math.sin(deltaPhi / 2) * Math.sin(deltaPhi / 2) +
                        Math.cos(phi1) * Math.cos(phi2) *
                        Math.sin(deltaLambda / 2) * Math.sin(deltaLambda / 2);
                    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    
                    return R * c; // Distance in meters
                }
    
                // Get arrow entity here to ensure it's available after DOM is loaded
                const arrowEntity = document.getElementById('arrow');
    
                navigator.geolocation.watchPosition(position => {
                    const { latitude, longitude } = position.coords;
                    const distance = calculateDistance(latitude, longitude, targetLat, targetLng);
                    document.getElementById('distance').textContent = `${distance.toFixed(2)} meters`;
    
                    // Calculate the angle to the target
                    const angle = Math.atan2(targetLng - longitude, targetLat - latitude) * (180 / Math.PI);
    
                    // Update arrow orientation if arrowEntity is available
                    if (arrowEntity) {
                        arrowEntity.setAttribute('rotation', `0 ${angle} 0`);
                    }
                }, error => {
                    console.error("Error getting position", error);
                }, {
                    enableHighAccuracy: true,
                    maximumAge: 0,
                    timeout: 5000
                });
            }
        });
    </script>
    
</body>
</html>
