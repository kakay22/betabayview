<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Compass Arrow</title>
    <style>
        /* Fullscreen camera feed */
        body, html {
            margin: 0;
            overflow: hidden;
            height: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: black;
        }

        /* Camera video feed */
        #camera {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            object-fit: cover;
            z-index: -1;
        }

        /* 3D Arrow overlay */
        #arrow {
            position: absolute;
            left: 50%;
            top: 50%;
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;
            border-bottom: 50px solid blue;
            transform-origin: center bottom;
            transform-style: preserve-3d;
            perspective: 1000px;
            transition: transform 0.1s; /* Smooth transition */
        }
    </style>
</head>
<body>

    <!-- Camera Feed -->
    <video id="camera" autoplay></video>

    <!-- 3D Arrow Overlay -->
    <div id="arrow"></div>

    <script>
        // Target location coordinates
        const targetLocation = { lat: 11.210247, lng: 124.992869 };
        const arrow = document.getElementById('arrow');
        let bearingToTarget = null; // Initialize bearing

        // Start the camera feed
        function startCamera() {
            navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' } })
                .then(stream => {
                    const video = document.getElementById('camera');
                    video.srcObject = stream;
                })
                .catch(error => console.error("Camera access denied:", error));
        }

        // Calculate the bearing between two coordinates
        function calculateBearing(lat1, lon1, lat2, lon2) {
            const toRad = deg => deg * (Math.PI / 180);
            const toDeg = rad => rad * (180 / Math.PI);

            const dLon = toRad(lon2 - lon1);
            const y = Math.sin(dLon) * Math.cos(toRad(lat2));
            const x = Math.cos(toRad(lat1)) * Math.sin(toRad(lat2)) -
                      Math.sin(toRad(lat1)) * Math.cos(toRad(lat2)) * Math.cos(dLon);
            const brng = toDeg(Math.atan2(y, x));

            return (brng + 360) % 360; // Normalize to 0-360
        }

        // Update arrow direction based on user's location
        function updateArrow(position) {
            const userLat = position.coords.latitude;
            const userLng = position.coords.longitude;
            bearingToTarget = calculateBearing(userLat, userLng, targetLocation.lat, targetLocation.lng);
            console.log(`Bearing to target: ${bearingToTarget}`);
        }

        // Handle device orientation updates
        function handleOrientation(event) {
            const alpha = event.alpha !== null ? event.alpha : 0; // Fallback if alpha is null
            const beta = event.beta || 0; // Default to 0 if undefined
            const gamma = event.gamma || 0; // Default to 0 if undefined

            console.log(`Device Rotation (alpha): ${alpha}, (beta): ${beta}, (gamma): ${gamma}`);

            if (bearingToTarget !== null) {
                const arrowRotation = bearingToTarget - alpha; // Adjust arrow based on calculated bearing
                arrow.style.transform = `translate(-50%, -50%) rotateZ(${arrowRotation}deg)`;
            }
        }

        // Start watching the user's location
        function watchPosition() {
            if (navigator.geolocation) {
                navigator.geolocation.watchPosition(position => {
                    updateArrow(position);
                }, () => {
                    console.error('Unable to retrieve your location.');
                });
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }

        // Check for device orientation permission
        function checkOrientationPermission() {
            if (typeof DeviceOrientationEvent.requestPermission === 'function') {
                DeviceOrientationEvent.requestPermission()
                    .then(permissionState => {
                        if (permissionState === 'granted') {
                            startCamera();
                            watchPosition();
                            window.addEventListener('deviceorientation', handleOrientation); // Set up event listener
                        } else {
                            console.error("Device orientation permission denied.");
                        }
                    })
                    .catch(console.error);
            } else {
                // Older browsers do not require permission.
                startCamera();
                watchPosition();
                window.addEventListener('deviceorientation', handleOrientation); // Set up event listener
            }
        }

        // Initialize the camera and arrow updates
        document.addEventListener("DOMContentLoaded", checkOrientationPermission);
    </script>
</body>
</html>